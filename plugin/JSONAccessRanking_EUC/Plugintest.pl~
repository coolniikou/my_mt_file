package MT::Plugin::JSONAccessRanking;
use strict;
use base qw(MT::Plugin);
use MT;
use MT::Util qw( start_end_day epoch2ts format_ts );
use Encode;
use XML::Simple;
use JSON;


our $VERSION = '1.0';

my $plugin; $plugin = new MT::Plugin::JSONAccessRanking({
    id => 'JSONAccessranking',
    key => 'jsonaccessranking',
    name => 'JSONAccessRanking',
    version => $VERSION,
    description => '<MT_TRANS phrase="as_DESCRIPTION">',
    doc_link => 'http://weblibrary.s224.xrea.com/mt4plugins/jsonaccessranking/',
    author_name => '<MT_TRANS phrase="as_AUTHOR_NAME">',
    author_link => 'http://weblibrary.s224.xrea.com/',
    blog_config_template => 'analytic_config.tmpl',
    settings => new MT::PluginSettings([
        [ 'analytics_username', { Default => undef, Scope => 'blog' } ],
        [ 'analytics_password', { Default => undef, Scope => 'blog' } ],
        [ 'analytics_profile_id', { Default => undef, Scope => 'blog' } ],
    ]),
    registry => {
        tags => {
            function => {
                JsonAccessRanking => \&_hdlr_analystic,
            },
        },
    },
});
MT->add_plugin($plugin);

sub doLog {
    my ($msg) = @_; 
    return unless defined($msg);

    use MT::Log;
    my $log = MT::Log->new;
    $log->message($msg) ;
    $log->save or die $log->errstr;
}

sub _hdlr_analystic {
	my ($ctx, $args) = @_;
	my $blog =  $ctx->stash('blog');
	my $blog_id =  $ctx->stash('blog_id');
	my $user = 'skymovable@gmail.com';
	my $pass = 'smagic0801';
	my $token = &get_token($user, $pass);
	my $profileid = '21674067';
	my $maxresult = 10;
	
	my $now = time;
    my $today = start_end_day( epoch2ts( $blog, $now ) );
       $today = format_ts( '%Y-%m-%d', $today, $blog );
    my $seven_days_ago = start_end_day( epoch2ts( $blog, $now - ( 60 * 60 * 24 * 7 ) ) );
       $seven_days_ago = format_ts( '%Y-%m-%d', $seven_days_ago, $blog );
    my $thirty_days_ago = start_end_day( epoch2ts( $blog, $now - ( 60 * 60 * 24 * 120 ) ) );
       $thirty_days_ago = format_ts( '%Y-%m-%d', $thirty_days_ago, $blog );
       
    my $data = &get_data($token, $profileid, $seven_days_ago, $today, $maxresult);
	    $data = decode('utf8',$data);
	my $parser = XML::Simple->new(forcearray => 1);
	my $xml = $parser->XMLin($data);
	my $json = objToJson($xml);
	doLog($json);
	return $json;
}

sub get_token{
	my ($user, $pass) = @_;
	my $token;
	my $ua = MT->new_ua({ agent => join("/", $plugin->name, $plugin->version) });
	my $token_url = 'https://www.google.com/accounts/ClientLogin';
	my $tk_con = {
      	accountType => 'GOOGLE',
		Email => $user,
		Passwd => $pass,
		service => 'analytics',
		source => 'companyName-applicationName-versionID',
	};
	my $res = $ua->post($token_url, Content => $tk_con);
	if ($res->is_success) {
		if ( $res->content =~ /Auth\=(.+)/i ){
			return $1;
			MT->log("Get token: " . $token);
 		}
	} else {
		MT->log("Error: can't get token " . $res->status_line);
	}
}

sub get_data{
	my ($token, $profileid, $start, $end, $maxresult) = @_;
	my $ua = MT->new_ua({ agent => join("/", $plugin->name, $plugin->version) });
	my @headers = (Authorization => "GoogleLogin Auth=$token");
	my $res = $ua->get($url, @headers);
	if ($res->is_success) {
		return $res->content;
		MT->log("Get " . $res->content);
	} else {
		MT->log("Error: Can't get content " . $res->status_line);
	}
}

1;

